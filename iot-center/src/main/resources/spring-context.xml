<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit-1.3.xsd"
       default-lazy-init="true">

    <description>Spring Configuration</description>

    <!-- 加载配置属性文件 -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:/iot.properties"/>

    <!-- 使用Annotation自动注册Bean，解决事物失效问题：在主容器中不扫描@Controller注解，在SpringMvc中只扫描@Controller注解。  -->
    <context:component-scan base-package="com.xinguang.iot">
    </context:component-scan>

    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- MyBatis begin -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:/mybatis-config.xml"></property>
    </bean>

    <!-- 引入 通用/自己扩展 的 Mapper -->
    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.xinguang.iot.dao.mapper"/>
        <property name="properties">
            <value>
                mappers=tk.mybatis.mapper.common.Mapper
                UUID=@com.xinguang.iot.common.utils.IdUtils@uuidWithTime()
                style=normal
            </value>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- MyBatis end -->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">

        <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
        <property name="driverClassName" value="${jdbc.driver}"/>

        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.pool.minIdle}"/>
        <property name="minIdle" value="${jdbc.pool.minIdle}"/>
        <property name="maxActive" value="${jdbc.pool.maxActive}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="60000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat"/>
    </bean>

    <!--配置connection-factory，指定连接rabbit server参数-->
    <rabbit:connection-factory id="connectionFactory" addresses="${rabbitmq.address}" username="${rabbitmq.username}" password="${rabbitmq.password}" virtual-host="${rabbitmq.virtualHost}" channel-cache-size="${rabbitmq.channelCacheSize}"/>

    <!--通过指定下面的admin信息，当前producer中的exchange和queue会在rabbitmq服务器上自动生成-->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!-- 消费者 队列声明-->
    <rabbit:queue id="businessAcceptQueue" durable="true" auto-delete="false" exclusive="false" name="${rabbitmq.queue.businessAcceptQueue}"/>

    <rabbit:topic-exchange name="${rabbitmq.exchange.name}" auto-delete="false" durable="true">
        <rabbit:bindings>
            <rabbit:binding pattern="${server.platformID}" queue="${rabbitmq.queue.businessAcceptQueue}" ></rabbit:binding>
        </rabbit:bindings>
    </rabbit:topic-exchange>

    <!--定义rabbit template用于数据的接收和发送-->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory" exchange="myChange" />

    <!-- 接受 -->
    <bean id="messageReceiver" class="com.xinguang.iot.listener.DataPointListener"/>

    <rabbit:listener-container connection-factory="connectionFactory">
        <rabbit:listener queues="businessAcceptQueue" ref="messageReceiver"/>
    </rabbit:listener-container>

    <!-- 提供方应用信息，用于计算依赖关系 -->
    <dubbo:application name="${dubbo.appname}"/>
    <!-- 使用multicast广播注册中心暴露服务地址 -->
    <dubbo:registry protocol="${dubbo.zk}" group="${dubbo.group}" address="${dubbo.zkAddress}"/>
    <!-- 用dubbo协议在20880端口暴露服务 -->
    <dubbo:protocol name="${dubbo.protocolname}" port="${dubbo.port}"/>

    <!-- 声明需要暴露的服务接口 -->
    <dubbo:service version="0.0.1" interface="com.xinguang.iot.IotService" ref="IotServiceImpl" group="${dubbo.group}"
                   timeout="${dubbo.timeout}" retries="0"/>

    <!--<import resource="quartzJob.xml"/>-->
</beans>